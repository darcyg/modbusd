/*
 * DaemonProcess.h
 *
 *  Created on: May 18, 2013
 *      Author: ruinmmal
 */

#ifndef DAEMONPROCESS_H_
#define DAEMONPROCESS_H_

#include <string>
#include <map>
#include "IPCConnection.h"
#include "ConfigFile.h"

#ifndef _DAEMON_VERSION_
#define _DAEMON_VERSION_ "v1.0-PC-BUILD"
#endif


typedef enum {
	CONTEXT_DAEMON,
	CONTEXT_PARENT,
	CONTEXT_ERROR
} EExecutionContext;



class CDaemonProcess: public IOnConfigOptionCallback {
protected:
	std::map<std::string, std::string> m_configOptions;

	std::string m_daemonName;
	/*
	 * if named lock exists in the system, and cannot be obtained then daemon instance cannot
	 * be created. By default lock name equals to process name so only one instance of daemon is allowed,
	 * however lock name can be generated by derived class and can contain some kind of ID so several instances of daemon
	 * can coexist in the system but processing different data e.g work with different COM port
	 */
	std::string m_lockName;

	int m_argc;
	char** m_argv;
	CIPCConnection* m_pConnection;

public:
	typedef enum {
		ERROR_NO_ERROR = 0,
		ERROR_ALREADY_RUNNING = -1,
		ERROR_OOM = -2,
		ERROR_UNKNOWN = -3,
		ERROR_FATAL = -4,
	} EError;

private:
	EExecutionContext becomeDaemon();

protected:
	//virtual int run();
	virtual int daemonLoop() = 0;
	virtual int parentLoop() = 0;
	virtual bool setupEnvironment();
	const std::string& getLockName() const;
	virtual EError createLockName();

// Interfaces
public:
	CDaemonProcess(std::string processName, int argc, char* argv[]);
	virtual ~CDaemonProcess();
	EError start();

public:
	// from
	virtual bool OnConfigOption(std::string& name, std::string& value);
};

#endif /* DAEMONPROCESS_H_ */
